{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":12753528567808596222,"abi":{"parameters":[{"name":"game_state","type":{"kind":"struct","path":"common::GameState","fields":[{"name":"game_ended","type":{"kind":"boolean"}},{"name":"turn_count","type":{"kind":"field"}},{"name":"current_player","type":{"kind":"field"}},{"name":"territories","type":{"kind":"array","length":24,"type":{"kind":"struct","path":"common::Territory","fields":[{"name":"id","type":{"kind":"field"}},{"name":"owner_id","type":{"kind":"field"}},{"name":"troop_count","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"mpc_state","type":{"kind":"struct","path":"common::MPCState","fields":[{"name":"user_encrypt_secret_hashes","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"user_mask_secret_hashes","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"round_id","type":{"kind":"field"}}]}},{"name":"winner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"},"error_types":{}},"bytecode":"","debug_symbols":"nd3bipBHGkbhe+ljD/6q+jZV3sowhFbb0NB0i5uBQXLvo2EchkQT+zmLyvLop5ZZdL31+ebN3atPv/5y//j26cPNy398vnl4en378f7p8cuvPt/M/P33Pry7ffz6yw8fb99/vHnZc8WLm7vHN1//M+q3Fzdv7x/ubl7W/O2fL25mAdPAbGDO85l1ATOAmcAsYOJvmbz+yCQwBUwD84PvINf/mP0n5jyfiQuYAcz3v4O1+huzMv7ILGACmASmgGlgNjDn+UxewAxg4DtI+A4SvoOE7yDBCwleSPBCghcKvFDghQIvFHihAhjwQoEXCrxQGxjwQoMXGrzQExg4DxrOg4bzoMELDV5o8EKDFzZ4YYMXNnhhw3ew4TvY8B1s+A42fAcbvoMN38GB7+DAd3DACwe8cMALB/6/8cC/Dw78++DAvw8O/PtgXJdA4/nWGtcUaAkUAuXzzTWuEqgF2gLByTDGJdAQaAq0BAqBUqASqAXaAskXMeWLmPJFTPkiJvhizBAoBSqBWqAtkFhDcuOQ3jiWWGOJNSQ5DmmOY4k1llhDsuOQ7jhCzoiQM0LS45D2OCQ+DqmPQ/LjkP44JEAOKZBDEuSQBjkkQg6pkCPFGinWkBA5pEQOSZFDWuSQGDmkRg7JkaPEGj8RJL8DiTUkSY4Sa5RYQ6rkkCw5Ws6IljNCyuSQNDmkTQ6Jk0Pq5JA8OaRPDgmUQwrlkEQ5pFEOiZRjizW2WGOLNbZYY4s1jljjiDUkVg6pleOINY5Y44g1Tgsk1jhgjXldAg2B4IyY1xIoBEqBSqAWaAsE1pjSLKc0yynNckqznNIspzTLOeSH4Yb8NNyQH4cbYI05L4GGQFOgJVAIBNaYswRqgbZAYo0l1lhijTUFkjNiyRmx5IxYYo0l1lhijSXWkGY5pVlOaZZTmuWUZjmlWU5pljPEGiHWCLFGijVSrJFijRRrSLOc0ixnijVSrJFijZ9oln+GSqxRYo0Sa/yoWf41JGdEyRlRckaUWKPEGiXWaLGGNMspzXJKs5zSLKc0yynNckqznC3WaLHGFmtsscYWa2yxxhZrSLOc0iznFmtsscYWa/xEs/wOJNY4Yo0j1vhRs/xrSM6II2fEkTPiiDUOWGNdl0BDoCnQEigESoFKoBZoCyQ3Ngdd2ZQ7m0MubQ65tTlCoBSoBGqBwBprgDXWvAQaAoE11lwChUApkJwRU86IKWfEFGssscYSayyxhjTLJc1ySbNc0iyXNMslzXJJs1wh1gixRog1gu76izVCrBFiDWmWS5rlCrFGijVSrJFTILFGijVSrJElkJwRKWdEyhlRYo0Sa5RYo8Qa0iyXNMslzXJJs1zSLJc0yyXNcrVYo8UaLdZosUaLNVqs0WINaZZLmuXaYo0t1thijb0EEmtsscYWa+wWSM4IuRG+5Er4kjvh64g1jljjiDWkWS5plkua5ZJmuaRZhjTLkGYZF1gjriVQCJQClUAt0BYIrBHSLGOANWJMgZZAIRBYI0YJ1AJtgeSMkLvhIXfDQ+6Gx5TNuRkCyeqcNMuQZhnSLEOaZUizDGmWIc0yZI0yllhjiTWWWGOJNZZYY4k1pFmGNMsIsUaINUKsESmQWCPEGiHWCFkplbvhIXfDQ+6Gh9wND5moDNmojBRrSLMMaZYhzTKkWYY0y5BmGdIsQ8Yqo8QaJdYosUaJNUqs0WINaZYhzTJarNFijRZrdAkk1mixRos1toxby93wkLvhIXfDQ+6GhyxYhkxYhmxYhjTLkGYZ0ixDmmVIswxpliHNMmTLMmTMMmTNMmTOMmTPMmXPMq8h0BRoCQTWyCsFKoFaILBGXmCNHJdAQyAZw5e74Sl3w1PuhqfsWabsWabsWaY0y5RmmdIsU5plSrNMaZYpzTJlzzJlzzJlzzJlzzJlzzJlzzLlAZ2UZpnSLFP2LFMe0Ul5RSfXFkisIQ/ppLykkzEFojdU5IyQu+Epd8NT9ixT9iyTXtShJ3XoTR16VIde1bFndeSLkGaZ9LIOPa0je5Ype5Ype5Ype5Yp7+ukNMuUZpmyZ5nyxk7KIztZ8LPYKXuWKe/spDy0k70EkjNC7oan3A1PuRuesmeZsmeZsmeZ0ixTmmVKs0xplinNMqVZpjTLlD3LlD3LlD3LlD3LlD3LlD3LlOd3UpplSrNM2bPMI9Y4YI26LoHAGnVNgZZAIRCcESV3w0vuhpfcDS/ZsyzZsyzZsyxpliXNsqRZljTLkmZZ0ixLmmXJnmXJnmXJnmXJnmXJnmXJnmXJGzwlzbKkWZbsWdYUayyxxhoCiTWWWGOJNVYKJGeE3A0vuRtecje8ZM+yZM+yZM+ypFmWNMuSZlnSLEuaZUmzLGmWJXuWJXuWJXuWJXuWJXuWJXuWJW/wlDTLkmZZsmdZJdYosUZNgcQaJdYosUaVQHJGyN3wkrvhJXfDS/YsS/YsS/YsS5plSbMsaZYlzbKkWZY0y5JmWbJnWbJnWbJnWbJnWbJnWbJnWfIGT0mzLGmWJXuWdcQaR6xxlkBijSPWOGKN0wLJGSF3w1vuhrfcDW/Zs2zZs+wrBEqBSqAWaAskX4Q0y5Zm2bJn2bJn2bJn2bJn2bJn2bJn2fIGT0uzbGmWLXuWPadAS6AQCKzRswRqgbZAckbI3fCWu+Etd8Nb9ixb9ixb9ixbmmVLs2xpli3NsqVZtjTLlmbZsmfZsmfZsmfZsmfZsmfZsmfZ8gZPS7NsaZYte5adYo2faJbfgVIgsUaKNVKskfCz2C13w1vuhrfcDW+5G96yZ9myZ9myZ9nSLFuaZUuzbGmWLc2ypVn285vll1+8en//8HD/6y8PT69vP94/PX74gn757X/dvr+/ffVw999fvv30+Pr//vTjv999+5Nv/Lv3T6/v3nx6f/f1b/r9z7789f8B","file_map":{"62":{"source":"use std::hash::poseidon2::Poseidon2::hash as poseidon2;\n\nuse crate::common::{AdjacencyMap, GameState, MPCState, PlayerState, Territory};\nuse crate::common::constants::{\n    INITIAL_TROOPS_PER_PLAYER, MAX_PLAYERS, MAX_TERRITORIES, MIN_REINFORCEMENTS,\n};\n\n#[export]\npub fn initialize_game_state(num_players: u32) -> GameState {\n    assert(num_players >= 2 & num_players <= MAX_PLAYERS, \"Invalid number of players\");\n\n    let mut game_state = GameState::default();\n\n    for i in 0..MAX_TERRITORIES {\n        let mut territory = Territory::default();\n        territory.id = i as Field;\n        game_state.territories[i] = territory;\n    }\n\n    game_state.game_ended = false;\n    game_state.turn_count = 0;\n    game_state.current_player = 1;\n    game_state.winner = 0;\n\n    game_state\n}\n\n#[export]\npub fn initialize_player_state(\n    player_id: Field,\n    encrypt_secret: Field,\n    mask_secret: Field,\n) -> PlayerState {\n    assert(player_id as u32 > 0 & player_id as u32 <= MAX_PLAYERS, \"Invalid player ID\");\n\n    // Validate secrets are non-zero\n    assert(encrypt_secret != 0, \"Encryption secret cannot be zero\");\n    assert(mask_secret != 0, \"Mask secret cannot be zero\");\n\n    let mut player_state = PlayerState::default();\n    player_state.player_id = player_id;\n    player_state.encrypt_secret = encrypt_secret;\n    player_state.mask_secret = mask_secret;\n    player_state.unallocated_troops = INITIAL_TROOPS_PER_PLAYER;\n    player_state.reinforcements = 0;\n    player_state.has_conquered_territory = false;\n\n    // Initialize territory visibility to false\n    for i in 0..MAX_TERRITORIES {\n        player_state.visible_territories[i] = false;\n    }\n\n    // Initialize territory view\n    for i in 0..MAX_TERRITORIES {\n        let mut territory = Territory::default();\n        territory.id = i as Field;\n        player_state.territories_view[i] = territory;\n    }\n\n    player_state\n}\n\n#[export]\npub fn create_risk_adjacency_map() -> AdjacencyMap {\n    let mut map = AdjacencyMap::default();\n\n    // Simple version of risk map with just 24 territories due to Noir bitshift constraint\n    // North America (9 territories)\n    map = map.add_adjacency(0, 1); // Alaska - Northwest Territory\n    map = map.add_adjacency(0, 3); // Alaska - Kamchatka (across the Bering Strait)\n    map = map.add_adjacency(1, 2); // Northwest Territory - Greenland\n    map = map.add_adjacency(1, 4); // Northwest Territory - Alberta\n    map = map.add_adjacency(2, 6); // Greenland - Quebec\n    map = map.add_adjacency(2, 14); // Greenland - Iceland\n    map = map.add_adjacency(3, 4); // Alberta - Ontario\n    map = map.add_adjacency(4, 5); // Ontario - Quebec\n    map = map.add_adjacency(4, 7); // Ontario - Eastern United States\n    map = map.add_adjacency(5, 7); // Quebec - Eastern United States\n    map = map.add_adjacency(6, 7); // Western United States - Eastern United States\n    map = map.add_adjacency(6, 8); // Western United States - Central America\n    map = map.add_adjacency(8, 9); // Central America - Venezuela\n\n    // South America (4 territories)\n    map = map.add_adjacency(9, 10); // Venezuela - Peru\n    map = map.add_adjacency(9, 11); // Venezuela - Brazil\n    map = map.add_adjacency(10, 11); // Peru - Brazil\n    map = map.add_adjacency(10, 12); // Peru - Argentina\n    map = map.add_adjacency(11, 12); // Brazil - Argentina\n    map = map.add_adjacency(11, 15); // Brazil - North Africa\n\n    // // Europe (7 territories)\n    map = map.add_adjacency(13, 14); // Great Britain - Iceland\n    map = map.add_adjacency(13, 15); // Great Britain - Western Europe\n    map = map.add_adjacency(13, 16); // Great Britain - Northern Europe\n    map = map.add_adjacency(13, 17); // Great Britain - Scandinavia\n    map = map.add_adjacency(14, 17); // Iceland - Scandinavia\n    map = map.add_adjacency(15, 16); // Western Europe - Northern Europe\n    map = map.add_adjacency(15, 18); // Western Europe - Southern Europe\n    map = map.add_adjacency(15, 21); // Western Europe - North Africa\n    map = map.add_adjacency(16, 17); // Northern Europe - Scandinavia\n    map = map.add_adjacency(16, 18); // Northern Europe - Southern Europe\n    map = map.add_adjacency(16, 19); // Northern Europe - Ukraine\n    map = map.add_adjacency(17, 19); // Scandinavia - Ukraine\n    map = map.add_adjacency(18, 19); // Southern Europe - Ukraine\n    map = map.add_adjacency(18, 21); // Southern Europe - North Africa\n    map = map.add_adjacency(18, 22); // Southern Europe - Egypt\n    // map = map.add_adjacency(18, 24); // Southern Europe - Middle East\n\n    // // Africa (6 territories)\n    map = map.add_adjacency(20, 21); // Congo - North Africa\n    map = map.add_adjacency(20, 22); // Congo - Egypt\n    map = map.add_adjacency(20, 23); // Congo - East Africa\n\n    map\n}\n\n#[export]\npub fn assign_initial_territories(\n    game_state: GameState,\n    num_players: u32,\n    random_seed: Field,\n) -> GameState {\n    assert(num_players >= 2 & num_players <= MAX_PLAYERS, \"Invalid number of players\");\n\n    let mut updated_state = game_state;\n\n    // Create deterministic \"random\" assignments based on the seed\n    for i in 0..MAX_TERRITORIES {\n        // Use poseidon hash to create pseudorandom values based on seed and territory ID\n        let hash_input = [random_seed, i as Field];\n        let rand_value = poseidon2(hash_input, 2);\n\n        // Assign to player 1 through num_players\n        let player = (rand_value as u32 % num_players) + 1;\n\n        // Update the game state\n        updated_state.territories[i].owner_id = player as Field;\n        updated_state.territories[i].troop_count = 1; // Start with 1 troop per territory\n    }\n\n    updated_state\n}\n\n#[export]\npub fn commit_to_user_secrets(\n    game_state: GameState,\n    encrypt_secret: Field,\n    mask_secret: Field,\n    player_id: Field,\n) -> GameState {\n    assert(player_id as u32 > 0 & player_id as u32 <= MAX_PLAYERS, \"Invalid player ID\");\n    assert(encrypt_secret != 0, \"Encryption secret cannot be zero\");\n    assert(mask_secret != 0, \"Mask secret cannot be zero\");\n\n    let mut updated = game_state;\n\n    // Hash the secrets to create commitments\n    let encrypt_hash = poseidon2([encrypt_secret, player_id], 2);\n    let mask_hash = poseidon2([mask_secret, player_id], 2);\n\n    // Store the commitments\n    let idx = (player_id - 1) as u32;\n    updated.mpc_state.user_encrypt_secret_hashes[idx] = encrypt_hash;\n    updated.mpc_state.user_mask_secret_hashes[idx] = mask_hash;\n\n    updated\n}\n\n#[export]\npub fn register_all_players(\n    game_state: GameState,\n    player_secrets: [(Field, Field); MAX_PLAYERS],\n) -> GameState {\n    let mut updated = game_state;\n\n    for i in 0..MAX_PLAYERS {\n        let player_id = (i + 1) as Field;\n        let (encrypt_secret, mask_secret) = player_secrets[i];\n\n        // Only process valid players with non-zero secrets\n        if (encrypt_secret as u32 != 0) & (mask_secret as u32 != 0) {\n            updated = commit_to_user_secrets(updated, encrypt_secret, mask_secret, player_id);\n        }\n    }\n\n    updated\n}\n\n#[export]\npub fn count_player_territories(game_state: GameState) -> [Field; MAX_PLAYERS + 1] {\n    let mut counts = [0; MAX_PLAYERS + 1];\n\n    for i in 0..MAX_TERRITORIES {\n        let owner = game_state.territories[i].owner_id;\n        if owner as u32 > 0 & owner as u32 <= MAX_PLAYERS {\n            let owner_idx = owner as u32;\n            counts[owner_idx] += 1;\n        }\n    }\n\n    counts\n}\n\npub fn calculate_reinforcements(game_state: GameState, player_id: Field) -> Field {\n    let territory_counts = count_player_territories(game_state);\n    let player_idx = player_id as u32;\n    let player_territory_count = territory_counts[player_idx];\n\n    // Basic rule: Number of territories divided by 3, with a minimum of 3\n    let reinforcements = player_territory_count / 3;\n\n    if reinforcements as u32 < MIN_REINFORCEMENTS {\n        MIN_REINFORCEMENTS as Field\n    } else {\n        reinforcements\n    }\n}\n\npub fn get_turn_reinforcements(game_state: GameState, player_state: PlayerState) -> PlayerState {\n    assert(game_state.current_player == player_state.player_id, \"Not this player's turn\");\n\n    let reinforcements = calculate_reinforcements(game_state, player_state.player_id);\n\n    // Update player state with new reinforcements\n    let mut updated_player = player_state;\n    updated_player.reinforcements = reinforcements as u32;\n    updated_player.unallocated_troops += reinforcements as u32;\n\n    updated_player\n}\n","path":"/Users/satyam/web3/noir/Risk/game_circuit/src/game_initialization.nr"}},"names":["count_player_territories"],"brillig_names":["directive_integer_quotient","directive_invert"]}