{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":7617286772610931090,"abi":{"parameters":[{"name":"game_state","type":{"kind":"struct","path":"common::GameState","fields":[{"name":"game_ended","type":{"kind":"boolean"}},{"name":"turn_count","type":{"kind":"field"}},{"name":"current_player","type":{"kind":"field"}},{"name":"territories","type":{"kind":"array","length":24,"type":{"kind":"struct","path":"common::Territory","fields":[{"name":"id","type":{"kind":"field"}},{"name":"owner_id","type":{"kind":"field"}},{"name":"troop_count","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"mpc_state","type":{"kind":"struct","path":"common::MPCState","fields":[{"name":"user_encrypt_secret_hashes","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"user_mask_secret_hashes","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"round_id","type":{"kind":"field"}}]}},{"name":"winner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"player_state","type":{"kind":"struct","path":"common::PlayerState","fields":[{"name":"player_id","type":{"kind":"field"}},{"name":"encrypt_secret","type":{"kind":"field"}},{"name":"mask_secret","type":{"kind":"field"}},{"name":"visible_territories","type":{"kind":"array","length":24,"type":{"kind":"boolean"}}},{"name":"territories_view","type":{"kind":"array","length":24,"type":{"kind":"struct","path":"common::Territory","fields":[{"name":"id","type":{"kind":"field"}},{"name":"owner_id","type":{"kind":"field"}},{"name":"troop_count","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"unallocated_troops","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"reinforcements","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"has_conquered_territory","type":{"kind":"boolean"}}]},"visibility":"private"},{"name":"adjacency_map","type":{"kind":"struct","path":"common::AdjacencyMap","fields":[{"name":"adjacency","type":{"kind":"array","length":24,"type":{"kind":"integer","sign":"unsigned","width":32}}}]},"visibility":"private"},{"name":"move_data","type":{"kind":"struct","path":"common::FortifyMove","fields":[{"name":"from_territory_id","type":{"kind":"field"}},{"name":"to_territory_id","type":{"kind":"field"}},{"name":"troop_count","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"tuple","fields":[{"kind":"struct","path":"common::GameState","fields":[{"name":"game_ended","type":{"kind":"boolean"}},{"name":"turn_count","type":{"kind":"field"}},{"name":"current_player","type":{"kind":"field"}},{"name":"territories","type":{"kind":"array","length":24,"type":{"kind":"struct","path":"common::Territory","fields":[{"name":"id","type":{"kind":"field"}},{"name":"owner_id","type":{"kind":"field"}},{"name":"troop_count","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"mpc_state","type":{"kind":"struct","path":"common::MPCState","fields":[{"name":"user_encrypt_secret_hashes","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"user_mask_secret_hashes","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"round_id","type":{"kind":"field"}}]}},{"name":"winner","type":{"kind":"field"}}]},{"kind":"struct","path":"common::PlayerState","fields":[{"name":"player_id","type":{"kind":"field"}},{"name":"encrypt_secret","type":{"kind":"field"}},{"name":"mask_secret","type":{"kind":"field"}},{"name":"visible_territories","type":{"kind":"array","length":24,"type":{"kind":"boolean"}}},{"name":"territories_view","type":{"kind":"array","length":24,"type":{"kind":"struct","path":"common::Territory","fields":[{"name":"id","type":{"kind":"field"}},{"name":"owner_id","type":{"kind":"field"}},{"name":"troop_count","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"unallocated_troops","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"reinforcements","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"has_conquered_territory","type":{"kind":"boolean"}}]},{"kind":"boolean"}]},"visibility":"private"},"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"}}},"bytecode":"","debug_symbols":"tZzdSitJFIXfJddedNXatau2rzIMB3/iISAq/gwMMu8+rUyrnE6mOR/uu3SSLyvKtxBWF77urveXLz9/HO5u7p9253+87m7vry6eD/d389Xrrkx6f/Lp4eLu7frp+eLxeXfea42z3f7u+u2h65+z3c3hdr87nx/+eTZDRqBGICdQJ9AgUACoTAQqBKrHoSgLpLqGRCAjUCOQE6gTaBAoAFQnAh03wspYIPNYQZVAIpAR6LgR9vmLaKoryAnUCTQIFJuQ918hTQQqBKoEOm5EG32BvPoKMgK1TcjLCnICdQINAh03ok91gXodX6Gz1Zvnb7u8ef646fPN5T3BpvSEkp5Q0xOUnmDpCS09wdMTenrC+IYE98+EskqI7IQ2pSeU9ISanqD0BEtPaOkJnp7Q0xPSO93SO+3pnfb0Tnt6pz29057eaU/vtKd32tM77emd9vRO9/RO9/RO9/RO9/RO9/RO9/RO9/RO9/RO9/RO9/ROj/ROj/ROj/ROj/ROj/ROj/ROj/ROj/ROj/ROj/ROR3qnI73Tkd7pSO90pHc60jsd6Z2O9E5Heqcju9N1mtITvqHTNmlJsNpXCfV7E+SrBH1HwsfealZXCZae0NITjnd6jI877jHZ14R3qBNoECgAdOLoQUwft6tidQOznjh6sAFVAolAx10LX6AxTdMKapvQ6o57PXH0YAPqm5CtoUGgo0aM+cbBAs1/zX+Fjh892IIKgSqBtAXNP8EKMgI18vWcQJ1Ag0DECBEjRIwQMUIikBGIGCFihIgRIkaIGGHECCNGGDHCiBFGjDBihBEjjBhhxAgjRjRiRCNGNGJEI0Y0YkQjRjRiRCNGNGJEI0Y4McKJEU6McGKEEyOcGOHECCdGODHCiRGdGNGJEZ0Y0YkRnRjRiRGdGNGJEZ0Y0YkRgxgxiBGDGDGIEYMYMYgRgxgxiBGDGDGIEUGMCGJEECOCGBHEiCBGBDEiiBFBjAhghKaJQIVAlUAikBGoEcgJ1Ak0CESMKMSIQowoxIhCjCjEiEKMKMSIQowoxAiyWYpsliKbpchmqUqMqMQIslmKbJYim6XIZimyWYpsliKbpchmKbJZimyWIpulyGYpslmKbJYim6XIZimyWYpsliKbpchmKbJZimyWIpulyGYpslmKbJYim6XIZimyWYpsliKbpchmKbJZimyWIpulyGYpslmKbJYim6XIZimyWYpsliKbpchmKbJZimyWIpulyGYpslnqxGY53+ddoHl1XUGNQL4JxVhBnUCDfL0A0InNcgMqBDpxYub/znzoxJHrDcgI1AjkBOoEGgQKAJ04N7wBFQIRI4IYEcSIIEYEMSKIEUGMCGCETROBCoEqgUQgI1AjkBOoE2gQiBhRiBGFGFGIEYUYUYgRhRhRiBHknKWRc5ZWiBGVGFGJEZUYUYkRlRhRiRGVGFGJEZUYUYkRIkaIGCFihIgRIkaIGCFihIgRIkaIGGHECCNGGDHCiBFGjDBihBEjjBhhxAgjRjRiRCNGNGJE+20j5ovLx8Pt7eHnj6//h3R++q+Lx8PF5e3+v8ubl7urL68+//2wvLLwD4/3V/vrl8f92ye9vzZ//L8=","file_map":{"61":{"source":"pub mod constants {\n    pub global MAX_PLAYERS: u32 = 2;\n    pub global MAX_TERRITORIES: u32 = 24;\n    pub global MAX_TROOPS_PER_TERRITORY: u32 = 100;\n    pub global INITIAL_TROOPS_PER_PLAYER: u32 = 40;\n    pub global MIN_REINFORCEMENTS: u32 = 3;\n}\n\npub struct Territory {\n    pub id: Field,\n    pub owner_id: Field,\n    pub troop_count: u32,\n}\n\nimpl Territory {\n    pub fn default() -> Self {\n        Territory { id: 0, owner_id: 0, troop_count: 0 }\n    }\n\n    pub fn encode(self) -> Field {\n        let id_part = self.id;\n        let owner_part = self.owner_id * 0x100;\n        let troops_part = (self.troop_count as Field) * 0x10000;\n\n        id_part + owner_part + troops_part\n    }\n\n    pub fn decode(encoded: Field) -> Self {\n        let id = encoded as u32 % 0x100;\n        let owner_id = (encoded as u32 / 0x100) % 0x100;\n        let troop_count = ((encoded as u32 / 0x10000) % 0x10000) as u32;\n\n        Territory { id: id as Field, owner_id: owner_id as Field, troop_count: troop_count }\n    }\n}\n\npub struct AdjacencyMap {\n    pub adjacency: [u32; constants::MAX_TERRITORIES],\n}\n\nimpl AdjacencyMap {\n    pub fn default() -> Self {\n        AdjacencyMap { adjacency: [0; constants::MAX_TERRITORIES] }\n    }\n\n    pub fn are_adjacent(self, from_territory: Field, to_territory: Field) -> bool {\n        let from_idx = from_territory as u32;\n        let to_bit = 1 << (to_territory as u8);\n\n        (self.adjacency[from_idx] & to_bit) != 0\n    }\n\n    // Add an adjacency between two territories (bidirectional)\n    pub fn add_adjacency(mut self, territory1: Field, territory2: Field) -> Self {\n        assert(\n            territory1 as u32 >= 0 & territory1 as u32 < constants::MAX_TERRITORIES,\n            \"Territory1 ID out of bounds\",\n        );\n        assert(\n            territory2 as u32 >= 0 & territory2 as u32 < constants::MAX_TERRITORIES,\n            \"Territory2 ID out of bounds\",\n        );\n\n        let t1_idx = territory1 as u32;\n        let t2_idx = territory2 as u32;\n\n        let t2_bit = 1 << t2_idx as u8;\n        let t1_bit = 1 << t1_idx as u8;\n\n        self.adjacency[t1_idx] |= t2_bit;\n        self.adjacency[t2_idx] |= t1_bit;\n\n        self\n    }\n}\n\npub struct MPCState {\n    pub user_encrypt_secret_hashes: [Field; constants::MAX_PLAYERS],\n    pub user_mask_secret_hashes: [Field; constants::MAX_PLAYERS],\n    pub round_id: Field,\n}\n\nimpl MPCState {\n    pub fn default() -> Self {\n        MPCState {\n            user_encrypt_secret_hashes: [0; constants::MAX_PLAYERS],\n            user_mask_secret_hashes: [0; constants::MAX_PLAYERS],\n            round_id: 0,\n        }\n    }\n}\n\npub struct GameState {\n    pub game_ended: bool,\n    pub turn_count: Field,\n    pub current_player: Field,\n    pub territories: [Territory; constants::MAX_TERRITORIES],\n    pub mpc_state: MPCState,\n    pub winner: Field, // 0 means no winner yet\n}\n\nimpl GameState {\n    pub fn default() -> Self {\n        GameState {\n            game_ended: false,\n            turn_count: 0,\n            current_player: 1,\n            territories: [Territory::default(); constants::MAX_TERRITORIES],\n            mpc_state: MPCState::default(),\n            winner: 0,\n        }\n    }\n}\n\npub struct PlayerState {\n    pub player_id: Field,\n    pub encrypt_secret: Field,\n    pub mask_secret: Field,\n    pub visible_territories: [bool; constants::MAX_TERRITORIES],\n    pub territories_view: [Territory; constants::MAX_TERRITORIES],\n    pub unallocated_troops: u32,\n    pub reinforcements: u32,\n    pub has_conquered_territory: bool,\n}\n\nimpl PlayerState {\n    pub fn default() -> Self {\n        PlayerState {\n            player_id: 0,\n            encrypt_secret: 0,\n            mask_secret: 0,\n            visible_territories: [false; constants::MAX_TERRITORIES],\n            territories_view: [Territory::default(); constants::MAX_TERRITORIES],\n            unallocated_troops: 0,\n            reinforcements: 0,\n            has_conquered_territory: false,\n        }\n    }\n}\n\npub struct TroopPlacementMove {\n    pub territory_id: Field,\n    pub troop_count: u32,\n}\n\npub struct AttackMove {\n    pub from_territory_id: Field,\n    pub to_territory_id: Field,\n    pub attack_troop_count: u32,\n    pub dice_roll_seed: Field,\n}\n\npub struct FortifyMove {\n    pub from_territory_id: Field,\n    pub to_territory_id: Field,\n    pub troop_count: u32,\n}\n\npub enum GameMove {\n    PlaceTroops(TroopPlacementMove),\n    Attack(AttackMove),\n    Fortify(FortifyMove),\n    EndTurn,\n}\n\npub struct AttackResult {\n    pub success: bool,\n    pub attacker_losses: u32,\n    pub defender_losses: u32,\n    pub territory_captured: bool,\n}\n\nimpl AttackResult {\n    pub fn default() -> Self {\n        AttackResult {\n            success: false,\n            attacker_losses: 0,\n            defender_losses: 0,\n            territory_captured: false,\n        }\n    }\n}\n","path":"/Users/satyam/web3/noir/Risk/game_circuit/src/common.nr"},"63":{"source":"// game_mechanics.nr\nuse dep::std;\nuse std::hash::poseidon2::Poseidon2::hash as poseidon2;\n\nuse crate::common::{\n    AdjacencyMap, AttackMove, AttackResult, FortifyMove, GameMove, GameState, PlayerState,\n    Territory, TroopPlacementMove,\n};\nuse crate::common::constants::{MAX_PLAYERS, MAX_TERRITORIES};\n\n// Place troops on a territory\n#[export]\npub fn place_troops(\n    game_state: GameState,\n    player_state: PlayerState,\n    move_data: TroopPlacementMove,\n) -> (GameState, PlayerState, bool) {\n    let territory_id = move_data.territory_id;\n    let troop_count = move_data.troop_count;\n\n    // Validation checks\n    let player_turn = game_state.current_player == player_state.player_id;\n    let owns_territory =\n        game_state.territories[territory_id as u32].owner_id == player_state.player_id;\n    let has_enough_troops = troop_count > 0 & troop_count <= player_state.unallocated_troops;\n\n    let valid_move = player_turn & owns_territory & has_enough_troops;\n\n    if valid_move {\n        // Update game and player state\n        let mut updated_game = game_state;\n        let mut updated_player = player_state;\n\n        updated_game.territories[territory_id as u32].troop_count += troop_count;\n        updated_player.unallocated_troops -= troop_count;\n\n        (updated_game, updated_player, true)\n    } else {\n        (game_state, player_state, false)\n    }\n}\n\n// Generate a dice roll using player secrets for randomness\nfn roll_dice(\n    attacker_secret: Field,\n    defender_id: Field,\n    from_territory: Field,\n    to_territory: Field,\n    num_dice: u32,\n    nonce: Field,\n) -> [u32; 3] {\n    // Return up to 3 dice values\n    let mut dice_values = [0; 3];\n\n    for i in 0..3 {\n        if i < num_dice {\n            // Create a unique seed for each die\n            let hash_input =\n                [attacker_secret, defender_id, from_territory, to_territory, i as Field, nonce];\n\n            let seed = poseidon2(hash_input, 6);\n\n            // Convert to a number between 1-6\n            dice_values[i] = ((seed as u32 % 6) + 1) as u32;\n        }\n    }\n\n    dice_values\n}\n\n// Sort an array of dice values in descending order\nunconstrained fn sort_dice(dice: [u32; 3], count: u32) -> [u32; 3] {\n    let mut sorted = dice;\n\n    // Simple bubble sort\n    for i in 0..count {\n        for j in 0..(count - i - 1) {\n            if sorted[j] < sorted[j + 1] {\n                let temp = sorted[j];\n                sorted[j] = sorted[j + 1];\n                sorted[j + 1] = temp;\n            }\n        }\n    }\n\n    sorted\n}\n\n#[export]\npub fn execute_attack(\n    game_state: GameState,\n    player_state: PlayerState,\n    adjacency_map: AdjacencyMap,\n    move_data: AttackMove,\n) -> (GameState, PlayerState, AttackResult) {\n    let from_territory_id = move_data.from_territory_id as u32;\n    let to_territory_id = move_data.to_territory_id as u32;\n    let attack_troop_count = move_data.attack_troop_count;\n\n    // Default result\n    let mut result = AttackResult::default();\n\n    // Validation checks\n    let player_turn = game_state.current_player == player_state.player_id;\n    let owns_from = game_state.territories[from_territory_id].owner_id == player_state.player_id;\n    let doesnt_own_to = game_state.territories[to_territory_id].owner_id != player_state.player_id;\n    let territories_adjacent =\n        adjacency_map.are_adjacent(from_territory_id as Field, to_territory_id as Field);\n    let from_troops = game_state.territories[from_territory_id].troop_count;\n    let has_enough_troops = attack_troop_count > 0 & attack_troop_count < from_troops;\n\n    let valid_attack =\n        player_turn & owns_from & doesnt_own_to & territories_adjacent & has_enough_troops;\n\n    assert(valid_attack == true, \"attack should be valid\");\n\n    // The attack is valid, proceed with the battle\n    result.success = true;\n\n    // Determine number of dice\n    let attacker_dice = if attack_troop_count >= 3 {\n        3\n    } else {\n        attack_troop_count\n    };\n\n    let defender_troops = game_state.territories[to_territory_id].troop_count;\n    let defender_dice = if defender_troops >= 2 { 2 } else { 1 };\n\n    // Roll and sort dice\n    let defender_id = game_state.territories[to_territory_id].owner_id;\n    let nonce = move_data.dice_roll_seed;\n\n    let attacker_rolls = roll_dice(\n        player_state.encrypt_secret,\n        defender_id,\n        from_territory_id as Field,\n        to_territory_id as Field,\n        attacker_dice,\n        nonce,\n    );\n\n    // Simulate defender rolls (in real game, defender would use their own secret)\n    let defender_secret = poseidon2([player_state.encrypt_secret, defender_id], 2);\n\n    let defender_rolls = roll_dice(\n        defender_secret,\n        player_state.player_id,\n        to_territory_id as Field,\n        from_territory_id as Field,\n        defender_dice,\n        nonce,\n    );\n    println(f\"attacker roles: {attacker_rolls}\");\n    println(f\"defender roles: {defender_rolls}\");\n    let mut sorted_attacker = [0, 0, 0];\n    let mut sorted_defender = [0, 0, 0];\n\n    unsafe {\n        sorted_attacker = sort_dice(attacker_rolls, attacker_dice);\n        sorted_defender = sort_dice(defender_rolls, defender_dice);\n    }\n    // Sort dice in descending order\n\n    // Compare dice and compute casualties\n    let mut attacker_losses = 0;\n    let mut defender_losses = 0;\n    let compare_count = if defender_dice < attacker_dice {\n        defender_dice\n    } else {\n        attacker_dice\n    };\n\n    unsafe {\n        let result = calculate_losses(compare_count, sorted_attacker, sorted_defender);\n        attacker_losses = result.0;\n        defender_losses = result.1;\n    }\n    // Update result with battle outcome\n    result.attacker_losses = attacker_losses;\n    result.defender_losses = defender_losses;\n\n    // Update game state based on the outcome\n    let mut updated_game = game_state;\n    let mut updated_player = player_state;\n\n    // Check if the territory was conquered\n    let territory_conquered = defender_losses >= defender_troops;\n    result.territory_captured = territory_conquered;\n\n    if territory_conquered {\n        // Attacker conquers the territory\n        let remaining_attack_troops = attack_troop_count - attacker_losses;\n        updated_game.territories[to_territory_id].owner_id = player_state.player_id;\n        updated_game.territories[to_territory_id].troop_count = remaining_attack_troops;\n        updated_game.territories[from_territory_id].troop_count -=\n            (remaining_attack_troops + attacker_losses);\n\n        // Mark that player has conquered a territory this turn (for cards)\n        updated_player.has_conquered_territory = true;\n    } else {\n        // Defender keeps the territory with reduced troops\n        updated_game.territories[from_territory_id].troop_count -= attacker_losses;\n        updated_game.territories[to_territory_id].troop_count -= defender_losses;\n    }\n\n    // Check for win condition\n    updated_game = check_win_condition(updated_game);\n\n    (updated_game, updated_player, result)\n}\n\n#[export]\npub fn execute_fortify(\n    game_state: GameState,\n    player_state: PlayerState,\n    adjacency_map: AdjacencyMap,\n    move_data: FortifyMove,\n) -> (GameState, PlayerState, bool) {\n    let from_territory_id = move_data.from_territory_id as u32;\n    let to_territory_id = move_data.to_territory_id as u32;\n    let troop_count = move_data.troop_count;\n\n    // Validation checks\n    let player_turn = game_state.current_player == player_state.player_id;\n    let owns_from = game_state.territories[from_territory_id].owner_id == player_state.player_id;\n    let owns_to = game_state.territories[to_territory_id].owner_id == player_state.player_id;\n    let territories_adjacent =\n        adjacency_map.are_adjacent(from_territory_id as Field, to_territory_id as Field);\n    let from_troops = game_state.territories[from_territory_id].troop_count;\n    let has_enough_troops = troop_count > 0 & troop_count < from_troops;\n\n    let valid_fortify =\n        player_turn & owns_from & owns_to & territories_adjacent & has_enough_troops;\n\n    if valid_fortify {\n        // Update game state\n        let mut updated_game = game_state;\n\n        updated_game.territories[from_territory_id].troop_count -= troop_count;\n        updated_game.territories[to_territory_id].troop_count += troop_count;\n\n        (updated_game, player_state, true)\n    } else {\n        (game_state, player_state, false)\n    }\n}\n\n#[export]\npub fn check_win_condition(game_state: GameState) -> GameState {\n    let mut updated_game = game_state;\n    let territory_counts = count_player_territories(game_state);\n\n    // Check if any player owns all territories\n    for player_id in 1..=MAX_PLAYERS {\n        if territory_counts[player_id] as u32 == MAX_TERRITORIES {\n            updated_game.game_ended = true;\n            updated_game.winner = player_id as Field;\n        }\n    }\n\n    updated_game\n}\n\n// Count territories owned by each player\npub fn count_player_territories(game_state: GameState) -> [Field; MAX_PLAYERS + 1] {\n    let mut counts = [0; MAX_PLAYERS + 1];\n\n    for i in 0..MAX_TERRITORIES {\n        let owner = game_state.territories[i].owner_id;\n        if owner as u32 > 0 & owner as u32 <= MAX_PLAYERS {\n            let owner_idx = owner as u32;\n            counts[owner_idx] += 1;\n        }\n    }\n\n    counts\n}\n\n#[export]\npub fn end_turn(game_state: GameState) -> GameState {\n    // Ensure the game has not ended\n    assert(!game_state.game_ended, \"Game has already ended\");\n\n    let mut updated_game = game_state;\n\n    // Find the next active player\n    let current_player = game_state.current_player;\n    let mut next_player = current_player + 1;\n\n    // Wrap around to player 1 if we reach beyond max players\n    if next_player as u32 > MAX_PLAYERS {\n        next_player = 1;\n    }\n\n    // Update game state\n    updated_game.current_player = next_player;\n    updated_game.turn_count += 1;\n\n    updated_game\n}\n\npub fn execute_move(\n    game_state: GameState,\n    player_state: PlayerState,\n    adjacency_map: AdjacencyMap,\n    game_move: GameMove,\n) -> (GameState, PlayerState, bool) {\n    match game_move {\n        GameMove::PlaceTroops(move_data) => { place_troops(game_state, player_state, move_data) },\n        GameMove::Attack(move_data) => {\n            let (updated_game, updated_player, result) =\n                execute_attack(game_state, player_state, adjacency_map, move_data);\n            (updated_game, updated_player, result.success)\n        },\n        GameMove::Fortify(move_data) => {\n            execute_fortify(game_state, player_state, adjacency_map, move_data)\n        },\n        GameMove::EndTurn => {\n            if game_state.current_player == player_state.player_id {\n                let updated_game = end_turn(game_state);\n                (updated_game, player_state, true)\n            } else {\n                (game_state, player_state, false)\n            }\n        },\n        _ => (game_state, player_state, false),\n    }\n}\n\nunconstrained fn calculate_losses(\n    compare_count: u32,\n    sorted_attacker: [u32; 3],\n    sorted_defender: [u32; 3],\n) -> (u32, u32) {\n    let mut defender_losses = 0;\n    let mut attacker_losses = 0;\n    for i in 0..compare_count {\n        if sorted_attacker[i] > sorted_defender[i] {\n            defender_losses += 1;\n        } else {\n            attacker_losses += 1;\n        }\n    }\n    (attacker_losses, defender_losses)\n}\n","path":"/Users/satyam/web3/noir/Risk/game_circuit/src/game_mechanics.nr"}},"names":["execute_fortify"],"brillig_names":["directive_integer_quotient","directive_invert","directive_to_radix"]}