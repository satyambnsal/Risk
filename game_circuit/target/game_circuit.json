{"noir_version":"1.0.0-beta.3+ceaa1986628197bd1170147f6a07f0f98d21030a","hash":3781047339943278088,"abi":{"parameters":[{"name":"age","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null,"error_types":{"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"7Z3RaiJbEEX/xWcf3Lu6T5/Or1yGwSTOIIgJJrlwCfn32x3GSYYR6XUeQ72EtLqPwvKhWFVlv67ud7cvP7/vjz8enlY3/7yuDg932+f9w3G6el3p/aGnx+1xvnp63p6eVzeKsl7tjvfTf13/tl792B92q5vSvX1br0wDQQMdDfSXAu43vwIu/hxY//XSsT+fPdb6+6Ue57PLpbOji1+BGGr72cOls7vfZ3d9aT+7Xjy7+Hx2VevZ08XtaX847H9+/+ObtJn/xMX3vfZBY6SJboMTwgnjROBEhxM9ThScGHACM+8w8x4z7zHzHjPvMfMeM+8x8x4z7zHzHjPvMfOCmRfMvGDmBTMvmHnBzAtmXjDzgpkXzHzAzAfMfMDMB8x8wMwHzHzAzAfMfMDMB8y8YuYVM6+YecXMK2ZeMfOKmVfMvGLmFTMfMfMRMx8x8xEzHzHzETMfMfMRMx8x8xEz12bDI+IR80jwSMcjPY8UHhl4pPIIpy9OX5y+OH1x+uL0xemL0xenL05fnL45fXP65vTN6ZvTN6dvTt+cvjl9c/rB6QenH5x+cPrB6QenH5x+cPpc14n7OnFhJ27sxJWduLMTl3bi1k5c24l7O3FxJ27uxNWduLsTl3fi9k5c34n7O3GBJ27wxBWeuMMTl3jiFk9c44l7PHGRp8smr+rch6mfmlnnSOGRgUcqi0wXml/YUGDy7xn+mvHqkheXvLbkpSWvLHlhyetKXlbyqpIXlbym5CUlryh5QcnrSV5O8mqSF5PZ+gUJzDxbvyCRrd/liWz9Lk9k63d5Ilu/yxPZ+l2eyNbv8kS2fpcnsvW7PJGtXxrJ1i+NfPnW71U9Jy4BBSXg2/ss/2T0+BctHWA6wHSA6QDTAaYDTAeYDjAdIHaA10o53jSmPeO397XM16yyssrKKiurrKyyssrKKiurrC9XZV1NZKd1eSI7rcsT2WldnshO6/JEdlqXJ7LTSiLZaaWR7LTSSC7Z0kgu2dJILtnSSC7Z0kgu2dJILtnSSC7Z0kgu2dLIl1+yvR7h9LnLE5d54jZPXOeJ+zxxoSdu9MSVnrjT09Aw8sjpc60n7vXExZ642RNXe+JuT1zuids9cb2n2jDxyulzwyeu+MQdn7jkE7d84ppP3POJiz5x06exYeC5YRaHD+Nw12fu+sxdn7nrM3d95q7P3PWZuz5z12c1jGJx+tz1mbs+c9dn7vrMXZ+56zN3fW6Yw2sYxGuZxOP0G2bxGobxGqbxGsbxGubxGgbyuOszd33mrs/RMIjJ6XPXZ+76zF2fueszd33mrs/c9Zm7PnPX565hDpfT567P3PWZuz5z12fu+sxdn7nrM3d95q7P3PWZuz5z12fu+sxdn7nrM3d95q7P3PWZuz5z1+fSMIXP6XPXZ+76zF2fueszd33mrs/c9Zm7PnPX56FhCYPT567P3PWZuz5z12fu+sxdn7nrM3d95q7PtWEHh9Pnrs/c9Zm7PnPXZ+76zF2fueszd33mrs9jwwpWww4WX8Liri+46wvu+oK7vuCuL7jrC+76gru+4K4v1LCCx+lz1xfc9QV3fcFdX3DXF9z1BXd9wV1fcNcXbtjA5PS56wvu+oK7vuCuL7jrC8Mf0Z4jI45cdn1Xlrunq3+3p/329rB7mhLzky/Hu/ONWqfL5/8ez8+cb+X6eHq4292/nHbzTV0/3c91emv36+i/zfPI04WGzXpquX/8Hvj7gxrXcvfxk0Lzg6Wuh/jYNJ8fivA6Ypg+4fQp/wc=","file_map":{"29":{"source":"pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod merkle;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod sha256;\npub mod sha512;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod uint128;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n}\n","path":"std/lib.nr"},"64":{"source":"mod common;\nmod visibility;\nmod game_initialization;\nmod game_mechanics;\n\nuse crate::common::constants;\n\nfn main(age: u32) {\n    assert(age >= 18);\n    let message = \"Noir Gud\";\n    let arr = message.as_bytes().map(|charCode| charCode as Field);\n    println(arr);\n    // let field_arr = arr;\n\n    let hash = std::hash::pedersen_hash(arr);\n    println(constants::MAX_TERRITORIES);\n\n    let commitment = std::hash::pedersen_commitment(arr);\n    println(hash);\n    println(commitment);\n}\n\n#[test]\nfn test_main() {\n    main(20);\n}\n","path":"/Users/satyam/web3/noir/Risk/game_circuit/src/main.nr"}},"names":["main"],"brillig_names":["print_unconstrained","print_unconstrained","print_unconstrained","print_unconstrained","directive_integer_quotient"]}