/* Autogenerated file, do not edit! */

/* eslint-disable */

import { Noir, InputMap, CompiledCircuit, ForeignCallHandler } from '@noir-lang/noir_js'

export { type ForeignCallHandler } from '@noir-lang/noir_js'

export type Field = string
export type u32 = string

export type GameState = {
  game_ended: boolean
  turn_count: Field
  current_player: Field
  territories: Territory[]
  mpc_state: MPCState
  winner: Field
}

export type Territory = {
  id: Field
  owner_id: Field
  troop_count: u32
}

export type MPCState = {
  user_encrypt_secret_hashes: Field[]
  user_mask_secret_hashes: Field[]
  round_id: Field
}

export type PlayerState = {
  player_id: Field
  encrypt_secret: Field
  mask_secret: Field
  visible_territories: boolean[]
  territories_view: Territory[]
  unallocated_troops: u32
  reinforcements: u32
  has_conquered_territory: boolean
}

export type AdjacencyMap = {
  adjacency: u32[]
}

export type TroopPlacementMove = {
  territory_id: Field
  troop_count: u32
}

export type AttackMove = {
  from_territory_id: Field
  to_territory_id: Field
  attack_troop_count: u32
  dice_roll_seed: Field
}

export type AttackResult = {
  success: boolean
  attacker_losses: u32
  defender_losses: u32
  territory_captured: boolean
}

export type FortifyMove = {
  from_territory_id: Field
  to_territory_id: Field
  troop_count: u32
}

export type initialize_game_stateInputType = {
  num_players: u32
}

export type initialize_game_stateReturnType = GameState
export const initialize_game_state_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'num_players',
        type: { kind: 'integer', sign: 'unsigned', width: 32 },
        visibility: 'private',
      },
    ],
    return_type: {
      abi_type: {
        kind: 'struct',
        path: 'common::GameState',
        fields: [
          { name: 'game_ended', type: { kind: 'boolean' } },
          { name: 'turn_count', type: { kind: 'field' } },
          { name: 'current_player', type: { kind: 'field' } },
          {
            name: 'territories',
            type: {
              kind: 'array',
              length: 24,
              type: {
                kind: 'struct',
                path: 'common::Territory',
                fields: [
                  { name: 'id', type: { kind: 'field' } },
                  { name: 'owner_id', type: { kind: 'field' } },
                  { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                ],
              },
            },
          },
          {
            name: 'mpc_state',
            type: {
              kind: 'struct',
              path: 'common::MPCState',
              fields: [
                {
                  name: 'user_encrypt_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                {
                  name: 'user_mask_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                { name: 'round_id', type: { kind: 'field' } },
              ],
            },
          },
          { name: 'winner', type: { kind: 'field' } },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '15803065596631416538': { error_kind: 'string', string: 'Invalid number of players' },
    },
  },
  bytecode:
    'H4sIAAAAAAAA/9Wb6W7TQBSF7SQQmlAolH1N2XfGW2Kzln2nbZY//EuoI/GHR+AdeCeeAl4GHzKWrMRUqnxvpTPSaNxOOvpyztQez73jOrMyyuoXe+1mtW5blE5WG/a65iyW/HPrtjXViicx1nRW0hLcqmN7+UVRi75tB/MCDqyAxVJXFCww3TBMe37qBd7Y+MkkjkwYTbqxF3tRHG37cRCkcRj3kknSM4kXBqk3jRJ/asfqVx8rsGOZgaCRu5mAVbkFJ4lfgqsyAYe2HeWC5BMQv+jMAdQVBas6AYeCXCMlI6UnXN+RvRlocQ73iNNUK54rN5bR5KyRcNYd2XuFFmeDRM99JJz7STibJPPzAImeSyScLQHfU7vC1ORsk+h5kIRzWc73VJPzEImeh0k4V+R839bkPEKi51ESzlU5379qch4j0fM4CecJOd8nmpwnSfQ8RcJ5Ws73sSbnGRI9z5JwnpPzPdHkPE+i5wUSzotyvseanB0SPddIOC/J+d7T5LxMoucVEs6rcr53NTmvkeh5nYTzhpzvkSbnTRI9b5Fw3pbzPdTkvEOi510SzntyvgeanPdJ9DQknJ6c774mp0+iZ0DCGcr5rpofEpHo2SXh7Mn5rsoZk+iZkHA+EPM9VY2/PyTR8xEJ52M531Xj709I9HxKwrku57tq/P0ZiZ7PSThfyPmuGn9/SaLnKxLO13K+q8bf35Do+ZaE852c72NNzvcken4g4fxIwvmJhPMzCecGCecmCeeWMKfrLJatAnvNmZ3pw/kXnC3BuQ2cicB5A+TyI08eOejI70buNPKSkfO7klXkqiIPFDmWyF9EbiDy7pDThnwx5GIhzwk5RMjPQe4L8kqQs9HJ6lpWEcdHjBzxZ8R2ETdFTBLxPsTSEKdCDAjxFcQuEBfAnju+HDb6sA+LPU7sH2JvDvte2FPCfg32QrDPgHd4vB/j3RPvdfk7E9b6WEdjjYr1H9ZWWLdgTYDnLZ5leE7gHoz7G+4d+L/EnN+0OtYKujZt+/vHt5/ff238KXT907Osz53rX7Jtq9BfPENlqhU/H7+tM75pOoulVbhuz/Xl+jVK/s79z8+1uXanz7o7jLtc0pePuWrbIm/+Pf4C4rv6sPo+AAA=',
}

export async function initialize_game_state(
  num_players: u32,
  foreignCallHandler?: ForeignCallHandler
): Promise<GameState> {
  const program = new Noir(initialize_game_state_circuit)
  const args: InputMap = { num_players }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as GameState
}
export type initialize_player_stateInputType = {
  player_id: Field
  encrypt_secret: Field
  mask_secret: Field
}

export type initialize_player_stateReturnType = PlayerState
export const initialize_player_state_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      { name: 'player_id', type: { kind: 'field' }, visibility: 'private' },
      { name: 'encrypt_secret', type: { kind: 'field' }, visibility: 'private' },
      { name: 'mask_secret', type: { kind: 'field' }, visibility: 'private' },
    ],
    return_type: {
      abi_type: {
        kind: 'struct',
        path: 'common::PlayerState',
        fields: [
          { name: 'player_id', type: { kind: 'field' } },
          { name: 'encrypt_secret', type: { kind: 'field' } },
          { name: 'mask_secret', type: { kind: 'field' } },
          {
            name: 'visible_territories',
            type: { kind: 'array', length: 24, type: { kind: 'boolean' } },
          },
          {
            name: 'territories_view',
            type: {
              kind: 'array',
              length: 24,
              type: {
                kind: 'struct',
                path: 'common::Territory',
                fields: [
                  { name: 'id', type: { kind: 'field' } },
                  { name: 'owner_id', type: { kind: 'field' } },
                  { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                ],
              },
            },
          },
          { name: 'unallocated_troops', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
          { name: 'reinforcements', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
          { name: 'has_conquered_territory', type: { kind: 'boolean' } },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '6400654836729835912': { error_kind: 'string', string: 'Invalid player ID' },
      '9731500601468557507': { error_kind: 'string', string: 'Mask secret cannot be zero' },
      '9983489688954325393': { error_kind: 'string', string: 'Encryption secret cannot be zero' },
    },
  },
  bytecode:
    'H4sIAAAAAAAA/9WcyXLTQBCGx3aALITVYV/MvoPkJZYhQNj3fd+JiQIJIesNHgCK4sKNV+DIK8CJM3duPABXTvhPZkAl26lK3J3KP1WqcSSl/c3f45E0Pa2EmSzjle2N/dxk66SpLglbd9vaa6z4gra8GriN2vbdh6gW/bYecIKkbI0DP2P7cFImBpVSFDHndebzYTEb+jm/x8uWykHByxfKnYEf+IWg0JsNcrkwyAfFUrlU9Ep+Phf6fYVSts/a6m/cVs7a8gbk2ug1WT0TprrEO2Wj3P01uGdqM8r7UhMYxpN1OtZM7b8U7KSDgu3V0nDQ1B/hZmp/0MiOcNLtHrDtrtd3plucXUl/vxLUMDo4w+4mM70r3hwYFP9dlWrgqlzxhmw97ARxAmJHJgaQUhSs0avbkCDXsKDYpB0wWwNXpQOO2HrUCeI6IHZkYgBzuQOOCHKNKjlSusMNGdkroBbniBynP53bVa+x4ieM7NXRlTFN4LHIF0k5cDZFTxod0cc1gccVRI+YrLqHlLAt1f6U0RmFpNss+GueGIUY2iz4Y/Lnmdm52niNFX8+CecCEs5mEs4WEs5WEs42Es6FJJztJJyLSDgXk3AuIeFcSsK5jIRzOQlnmoSzg4RzBQnnShLOVSScq0k415BwriXhXEfCuZ6EcwMJ50YSzgwJ5yajM3cqzbmZRM8tJJxbBfwe9k0WTc5tJHpuJ+HcIef3UJNzJ4meu0g4d8v5vVeTcw+JnntJOPfJ+f2ZJud+Ej0PkHB6cn4va3L6JHpmSThzcn7v0eTMk+hZIOHslPN7SZOzSKJnQMJZkvN7oMl5kETPQyScXXJ+L2pyHibR8wgJ51E5v3dqcnaT6HmMhPO4nN8LmpwnSPQ8ScJ5Ss7veU3O0yR6niHhPCvn95wm5zkSPc+TcF6Q83tWk/MiiZ6XSDgvy/nd1+S8QqLnVRLOa3J+V+W8TqLnDRLOm2J+D1Xj77dI9LxNwnlHzu+q8fe7JHreI+G8L+d31fj7AxI9H5JwPpLzu2r8/TGJnk9IOJ/K+V01/t5DomeZhPOZnN97NDl7SfQMSTj7xPzeqxp/f06i5wthzlSMNRn52z1A4Ry8YwLvXMD7DPCuAOThI8cd+ePIzUbeM3KKka+LXNgllQ05nMiPRO4h8vqQM4d8NOR6IY8KOUrI/0FuDfJWkBOCfAvkMmTM5DvbNlc2rB3HumysecZ6YqzVxTpYrDHF+k2sjcS6Q6zpw3o5rEVD4zDhg8k+TPRikh8BHgT3ENhFUB8dCvF3xLYRN0ZMFvFOF0s8VtkQX0LsBnERxBwwn4+5csxDY44X86eYm8S8H+bUMF+FuSDMs2AOA/MDePbGcy2eGfE8hmcdPEfgHh33v7i3xH0b7olwv4Fr+dPKhoEO4zvGToxLofUJ+uoL8/99dsZqjvLu9+7Rz19+3I0cmvBFvWPLbP3x+y/vz+sP76PH0rb+9qn5a1dX+1u33/WRZlu32LrV1uhHgu9hyTr7bTr2vQWmurRGPrfFjrn2N9X4v0Sdv5Oxeqpzp3qxUXuNY87mcltHeV07WmJ1R8SuoJa+s5/WsV/TVx2Rz+lYO6N6dwsxOHtu7JxnqksydsydG//NJOT5/DhLqsZ3ueL6TDqyz+n5F9wtimw2WgAA',
}

export async function initialize_player_state(
  player_id: Field,
  encrypt_secret: Field,
  mask_secret: Field,
  foreignCallHandler?: ForeignCallHandler
): Promise<PlayerState> {
  const program = new Noir(initialize_player_state_circuit)
  const args: InputMap = { player_id, encrypt_secret, mask_secret }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as PlayerState
}
export type register_all_playersInputType = {
  game_state: GameState
  player_secrets: [Field, Field][]
}

export type register_all_playersReturnType = GameState
export const register_all_players_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'player_secrets',
        type: {
          kind: 'array',
          length: 2,
          type: { kind: 'tuple', fields: [{ kind: 'field' }, { kind: 'field' }] },
        },
        visibility: 'private',
      },
    ],
    return_type: {
      abi_type: {
        kind: 'struct',
        path: 'common::GameState',
        fields: [
          { name: 'game_ended', type: { kind: 'boolean' } },
          { name: 'turn_count', type: { kind: 'field' } },
          { name: 'current_player', type: { kind: 'field' } },
          {
            name: 'territories',
            type: {
              kind: 'array',
              length: 24,
              type: {
                kind: 'struct',
                path: 'common::Territory',
                fields: [
                  { name: 'id', type: { kind: 'field' } },
                  { name: 'owner_id', type: { kind: 'field' } },
                  { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                ],
              },
            },
          },
          {
            name: 'mpc_state',
            type: {
              kind: 'struct',
              path: 'common::MPCState',
              fields: [
                {
                  name: 'user_encrypt_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                {
                  name: 'user_mask_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                { name: 'round_id', type: { kind: 'field' } },
              ],
            },
          },
          { name: 'winner', type: { kind: 'field' } },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '9731500601468557507': { error_kind: 'string', string: 'Mask secret cannot be zero' },
      '9983489688954325393': { error_kind: 'string', string: 'Encryption secret cannot be zero' },
    },
  },
  bytecode:
    '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',
}

export async function register_all_players(
  game_state: GameState,
  player_secrets: [Field, Field][],
  foreignCallHandler?: ForeignCallHandler
): Promise<GameState> {
  const program = new Noir(register_all_players_circuit)
  const args: InputMap = { game_state, player_secrets }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as GameState
}
export type assign_initial_territoriesInputType = {
  game_state: GameState
  num_players: u32
  random_seed: Field
}

export type assign_initial_territoriesReturnType = GameState
export const assign_initial_territories_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'num_players',
        type: { kind: 'integer', sign: 'unsigned', width: 32 },
        visibility: 'private',
      },
      { name: 'random_seed', type: { kind: 'field' }, visibility: 'private' },
    ],
    return_type: {
      abi_type: {
        kind: 'struct',
        path: 'common::GameState',
        fields: [
          { name: 'game_ended', type: { kind: 'boolean' } },
          { name: 'turn_count', type: { kind: 'field' } },
          { name: 'current_player', type: { kind: 'field' } },
          {
            name: 'territories',
            type: {
              kind: 'array',
              length: 24,
              type: {
                kind: 'struct',
                path: 'common::Territory',
                fields: [
                  { name: 'id', type: { kind: 'field' } },
                  { name: 'owner_id', type: { kind: 'field' } },
                  { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                ],
              },
            },
          },
          {
            name: 'mpc_state',
            type: {
              kind: 'struct',
              path: 'common::MPCState',
              fields: [
                {
                  name: 'user_encrypt_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                {
                  name: 'user_mask_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                { name: 'round_id', type: { kind: 'field' } },
              ],
            },
          },
          { name: 'winner', type: { kind: 'field' } },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '5019202896831570965': { error_kind: 'string', string: 'attempt to add with overflow' },
      '15803065596631416538': { error_kind: 'string', string: 'Invalid number of players' },
    },
  },
  bytecode:
    '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',
}

export async function assign_initial_territories(
  game_state: GameState,
  num_players: u32,
  random_seed: Field,
  foreignCallHandler?: ForeignCallHandler
): Promise<GameState> {
  const program = new Noir(assign_initial_territories_circuit)
  const args: InputMap = { game_state, num_players, random_seed }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as GameState
}
export type commit_to_user_secretsInputType = {
  game_state: GameState
  encrypt_secret: Field
  mask_secret: Field
  player_id: Field
}

export type commit_to_user_secretsReturnType = GameState
export const commit_to_user_secrets_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
      { name: 'encrypt_secret', type: { kind: 'field' }, visibility: 'private' },
      { name: 'mask_secret', type: { kind: 'field' }, visibility: 'private' },
      { name: 'player_id', type: { kind: 'field' }, visibility: 'private' },
    ],
    return_type: {
      abi_type: {
        kind: 'struct',
        path: 'common::GameState',
        fields: [
          { name: 'game_ended', type: { kind: 'boolean' } },
          { name: 'turn_count', type: { kind: 'field' } },
          { name: 'current_player', type: { kind: 'field' } },
          {
            name: 'territories',
            type: {
              kind: 'array',
              length: 24,
              type: {
                kind: 'struct',
                path: 'common::Territory',
                fields: [
                  { name: 'id', type: { kind: 'field' } },
                  { name: 'owner_id', type: { kind: 'field' } },
                  { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                ],
              },
            },
          },
          {
            name: 'mpc_state',
            type: {
              kind: 'struct',
              path: 'common::MPCState',
              fields: [
                {
                  name: 'user_encrypt_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                {
                  name: 'user_mask_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                { name: 'round_id', type: { kind: 'field' } },
              ],
            },
          },
          { name: 'winner', type: { kind: 'field' } },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '6400654836729835912': { error_kind: 'string', string: 'Invalid player ID' },
      '9731500601468557507': { error_kind: 'string', string: 'Mask secret cannot be zero' },
      '9983489688954325393': { error_kind: 'string', string: 'Encryption secret cannot be zero' },
    },
  },
  bytecode:
    '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',
}

export async function commit_to_user_secrets(
  game_state: GameState,
  encrypt_secret: Field,
  mask_secret: Field,
  player_id: Field,
  foreignCallHandler?: ForeignCallHandler
): Promise<GameState> {
  const program = new Noir(commit_to_user_secrets_circuit)
  const args: InputMap = { game_state, encrypt_secret, mask_secret, player_id }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as GameState
}
export type create_risk_adjacency_mapInputType = {}

export type create_risk_adjacency_mapReturnType = AdjacencyMap
export const create_risk_adjacency_map_circuit: CompiledCircuit = {
  abi: {
    parameters: [],
    return_type: {
      abi_type: {
        kind: 'struct',
        path: 'common::AdjacencyMap',
        fields: [
          {
            name: 'adjacency',
            type: {
              kind: 'array',
              length: 24,
              type: { kind: 'integer', sign: 'unsigned', width: 32 },
            },
          },
        ],
      },
      visibility: 'private',
    },
    error_types: {},
  },
  bytecode:
    'H4sIAAAAAAAA/7XXSU7EMBAF0A7zPEP6GHY877hKHLvvfwTyoZFQw47/K4q8S57KU9Ww+Ypxfbeb3zHsx/f9aP4X9ue3nIne9zR16+xsplJzMD7UmG22IYc2Zed69jmVWpIp1rtud6G4vvuMpHQONGdflM4jkrOuj9J5zJt3o3Se0JxBuj5Pac5klc4zlrOnpnSe0/JZpPm8YDnbInVespzOSJ1XJGePWuc1yRlnrfOGNe9e67zlOBdvtM47jrO19VU67ynONreszecDJ582iuf9keNct7vW+URxlpjFzmdOPosRO18ozsmona8UZ6/qeX/jOBd1PkfO+jSHzu/YHtjRN6InQ7+DXgJ1Ompg1Jeo3VAXoebAfY67EvcQznicnzibsO+xp7BesRaQ5/GP/34AcOc4KmAQAAA=',
}

export async function create_risk_adjacency_map(
  foreignCallHandler?: ForeignCallHandler
): Promise<AdjacencyMap> {
  const program = new Noir(create_risk_adjacency_map_circuit)
  const args: InputMap = {}
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as AdjacencyMap
}
export type place_troopsInputType = {
  game_state: GameState
  player_state: PlayerState
  move_data: TroopPlacementMove
}

export type place_troopsReturnType = [GameState, PlayerState, boolean]
export const place_troops_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'player_state',
        type: {
          kind: 'struct',
          path: 'common::PlayerState',
          fields: [
            { name: 'player_id', type: { kind: 'field' } },
            { name: 'encrypt_secret', type: { kind: 'field' } },
            { name: 'mask_secret', type: { kind: 'field' } },
            {
              name: 'visible_territories',
              type: { kind: 'array', length: 24, type: { kind: 'boolean' } },
            },
            {
              name: 'territories_view',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            { name: 'unallocated_troops', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
            { name: 'reinforcements', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
            { name: 'has_conquered_territory', type: { kind: 'boolean' } },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'move_data',
        type: {
          kind: 'struct',
          path: 'common::TroopPlacementMove',
          fields: [
            { name: 'territory_id', type: { kind: 'field' } },
            { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
          ],
        },
        visibility: 'private',
      },
    ],
    return_type: {
      abi_type: {
        kind: 'tuple',
        fields: [
          {
            kind: 'struct',
            path: 'common::GameState',
            fields: [
              { name: 'game_ended', type: { kind: 'boolean' } },
              { name: 'turn_count', type: { kind: 'field' } },
              { name: 'current_player', type: { kind: 'field' } },
              {
                name: 'territories',
                type: {
                  kind: 'array',
                  length: 24,
                  type: {
                    kind: 'struct',
                    path: 'common::Territory',
                    fields: [
                      { name: 'id', type: { kind: 'field' } },
                      { name: 'owner_id', type: { kind: 'field' } },
                      {
                        name: 'troop_count',
                        type: { kind: 'integer', sign: 'unsigned', width: 32 },
                      },
                    ],
                  },
                },
              },
              {
                name: 'mpc_state',
                type: {
                  kind: 'struct',
                  path: 'common::MPCState',
                  fields: [
                    {
                      name: 'user_encrypt_secret_hashes',
                      type: { kind: 'array', length: 2, type: { kind: 'field' } },
                    },
                    {
                      name: 'user_mask_secret_hashes',
                      type: { kind: 'array', length: 2, type: { kind: 'field' } },
                    },
                    { name: 'round_id', type: { kind: 'field' } },
                  ],
                },
              },
              { name: 'winner', type: { kind: 'field' } },
            ],
          },
          {
            kind: 'struct',
            path: 'common::PlayerState',
            fields: [
              { name: 'player_id', type: { kind: 'field' } },
              { name: 'encrypt_secret', type: { kind: 'field' } },
              { name: 'mask_secret', type: { kind: 'field' } },
              {
                name: 'visible_territories',
                type: { kind: 'array', length: 24, type: { kind: 'boolean' } },
              },
              {
                name: 'territories_view',
                type: {
                  kind: 'array',
                  length: 24,
                  type: {
                    kind: 'struct',
                    path: 'common::Territory',
                    fields: [
                      { name: 'id', type: { kind: 'field' } },
                      { name: 'owner_id', type: { kind: 'field' } },
                      {
                        name: 'troop_count',
                        type: { kind: 'integer', sign: 'unsigned', width: 32 },
                      },
                    ],
                  },
                },
              },
              {
                name: 'unallocated_troops',
                type: { kind: 'integer', sign: 'unsigned', width: 32 },
              },
              { name: 'reinforcements', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
              { name: 'has_conquered_territory', type: { kind: 'boolean' } },
            ],
          },
          { kind: 'boolean' },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '2920182694213909827': { error_kind: 'string', string: 'attempt to subtract with overflow' },
      '5019202896831570965': { error_kind: 'string', string: 'attempt to add with overflow' },
    },
  },
  bytecode:
    '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',
}

export async function place_troops(
  game_state: GameState,
  player_state: PlayerState,
  move_data: TroopPlacementMove,
  foreignCallHandler?: ForeignCallHandler
): Promise<[GameState, PlayerState, boolean]> {
  const program = new Noir(place_troops_circuit)
  const args: InputMap = { game_state, player_state, move_data }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as [GameState, PlayerState, boolean]
}
export type execute_attackInputType = {
  game_state: GameState
  player_state: PlayerState
  adjacency_map: AdjacencyMap
  move_data: AttackMove
}

export type execute_attackReturnType = [GameState, PlayerState, AttackResult]
export const execute_attack_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'player_state',
        type: {
          kind: 'struct',
          path: 'common::PlayerState',
          fields: [
            { name: 'player_id', type: { kind: 'field' } },
            { name: 'encrypt_secret', type: { kind: 'field' } },
            { name: 'mask_secret', type: { kind: 'field' } },
            {
              name: 'visible_territories',
              type: { kind: 'array', length: 24, type: { kind: 'boolean' } },
            },
            {
              name: 'territories_view',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            { name: 'unallocated_troops', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
            { name: 'reinforcements', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
            { name: 'has_conquered_territory', type: { kind: 'boolean' } },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'adjacency_map',
        type: {
          kind: 'struct',
          path: 'common::AdjacencyMap',
          fields: [
            {
              name: 'adjacency',
              type: {
                kind: 'array',
                length: 24,
                type: { kind: 'integer', sign: 'unsigned', width: 32 },
              },
            },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'move_data',
        type: {
          kind: 'struct',
          path: 'common::AttackMove',
          fields: [
            { name: 'from_territory_id', type: { kind: 'field' } },
            { name: 'to_territory_id', type: { kind: 'field' } },
            { name: 'attack_troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
            { name: 'dice_roll_seed', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
    ],
    return_type: {
      abi_type: {
        kind: 'tuple',
        fields: [
          {
            kind: 'struct',
            path: 'common::GameState',
            fields: [
              { name: 'game_ended', type: { kind: 'boolean' } },
              { name: 'turn_count', type: { kind: 'field' } },
              { name: 'current_player', type: { kind: 'field' } },
              {
                name: 'territories',
                type: {
                  kind: 'array',
                  length: 24,
                  type: {
                    kind: 'struct',
                    path: 'common::Territory',
                    fields: [
                      { name: 'id', type: { kind: 'field' } },
                      { name: 'owner_id', type: { kind: 'field' } },
                      {
                        name: 'troop_count',
                        type: { kind: 'integer', sign: 'unsigned', width: 32 },
                      },
                    ],
                  },
                },
              },
              {
                name: 'mpc_state',
                type: {
                  kind: 'struct',
                  path: 'common::MPCState',
                  fields: [
                    {
                      name: 'user_encrypt_secret_hashes',
                      type: { kind: 'array', length: 2, type: { kind: 'field' } },
                    },
                    {
                      name: 'user_mask_secret_hashes',
                      type: { kind: 'array', length: 2, type: { kind: 'field' } },
                    },
                    { name: 'round_id', type: { kind: 'field' } },
                  ],
                },
              },
              { name: 'winner', type: { kind: 'field' } },
            ],
          },
          {
            kind: 'struct',
            path: 'common::PlayerState',
            fields: [
              { name: 'player_id', type: { kind: 'field' } },
              { name: 'encrypt_secret', type: { kind: 'field' } },
              { name: 'mask_secret', type: { kind: 'field' } },
              {
                name: 'visible_territories',
                type: { kind: 'array', length: 24, type: { kind: 'boolean' } },
              },
              {
                name: 'territories_view',
                type: {
                  kind: 'array',
                  length: 24,
                  type: {
                    kind: 'struct',
                    path: 'common::Territory',
                    fields: [
                      { name: 'id', type: { kind: 'field' } },
                      { name: 'owner_id', type: { kind: 'field' } },
                      {
                        name: 'troop_count',
                        type: { kind: 'integer', sign: 'unsigned', width: 32 },
                      },
                    ],
                  },
                },
              },
              {
                name: 'unallocated_troops',
                type: { kind: 'integer', sign: 'unsigned', width: 32 },
              },
              { name: 'reinforcements', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
              { name: 'has_conquered_territory', type: { kind: 'boolean' } },
            ],
          },
          {
            kind: 'struct',
            path: 'common::AttackResult',
            fields: [
              { name: 'success', type: { kind: 'boolean' } },
              { name: 'attacker_losses', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
              { name: 'defender_losses', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
              { name: 'territory_captured', type: { kind: 'boolean' } },
            ],
          },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '2920182694213909827': { error_kind: 'string', string: 'attempt to subtract with overflow' },
      '5019202896831570965': { error_kind: 'string', string: 'attempt to add with overflow' },
      '5736200405146212474': { error_kind: 'string', string: 'attack should be valid' },
      '14225679739041873922': { error_kind: 'string', string: 'Index out of bounds' },
      '14514982005979867414': {
        error_kind: 'string',
        string: 'attempt to bit-shift with overflow',
      },
      '16761564377371454734': { error_kind: 'string', string: 'Array index out of bounds' },
      '17843811134343075018': { error_kind: 'string', string: 'Stack too deep' },
    },
  },
  bytecode:
    '',
}

export async function execute_attack(
  game_state: GameState,
  player_state: PlayerState,
  adjacency_map: AdjacencyMap,
  move_data: AttackMove,
  foreignCallHandler?: ForeignCallHandler
): Promise<[GameState, PlayerState, AttackResult]> {
  const program = new Noir(execute_attack_circuit)
  const args: InputMap = { game_state, player_state, adjacency_map, move_data }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as [GameState, PlayerState, AttackResult]
}
export type execute_fortifyInputType = {
  game_state: GameState
  player_state: PlayerState
  adjacency_map: AdjacencyMap
  move_data: FortifyMove
}

export type execute_fortifyReturnType = [GameState, PlayerState, boolean]
export const execute_fortify_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'player_state',
        type: {
          kind: 'struct',
          path: 'common::PlayerState',
          fields: [
            { name: 'player_id', type: { kind: 'field' } },
            { name: 'encrypt_secret', type: { kind: 'field' } },
            { name: 'mask_secret', type: { kind: 'field' } },
            {
              name: 'visible_territories',
              type: { kind: 'array', length: 24, type: { kind: 'boolean' } },
            },
            {
              name: 'territories_view',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            { name: 'unallocated_troops', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
            { name: 'reinforcements', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
            { name: 'has_conquered_territory', type: { kind: 'boolean' } },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'adjacency_map',
        type: {
          kind: 'struct',
          path: 'common::AdjacencyMap',
          fields: [
            {
              name: 'adjacency',
              type: {
                kind: 'array',
                length: 24,
                type: { kind: 'integer', sign: 'unsigned', width: 32 },
              },
            },
          ],
        },
        visibility: 'private',
      },
      {
        name: 'move_data',
        type: {
          kind: 'struct',
          path: 'common::FortifyMove',
          fields: [
            { name: 'from_territory_id', type: { kind: 'field' } },
            { name: 'to_territory_id', type: { kind: 'field' } },
            { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
          ],
        },
        visibility: 'private',
      },
    ],
    return_type: {
      abi_type: {
        kind: 'tuple',
        fields: [
          {
            kind: 'struct',
            path: 'common::GameState',
            fields: [
              { name: 'game_ended', type: { kind: 'boolean' } },
              { name: 'turn_count', type: { kind: 'field' } },
              { name: 'current_player', type: { kind: 'field' } },
              {
                name: 'territories',
                type: {
                  kind: 'array',
                  length: 24,
                  type: {
                    kind: 'struct',
                    path: 'common::Territory',
                    fields: [
                      { name: 'id', type: { kind: 'field' } },
                      { name: 'owner_id', type: { kind: 'field' } },
                      {
                        name: 'troop_count',
                        type: { kind: 'integer', sign: 'unsigned', width: 32 },
                      },
                    ],
                  },
                },
              },
              {
                name: 'mpc_state',
                type: {
                  kind: 'struct',
                  path: 'common::MPCState',
                  fields: [
                    {
                      name: 'user_encrypt_secret_hashes',
                      type: { kind: 'array', length: 2, type: { kind: 'field' } },
                    },
                    {
                      name: 'user_mask_secret_hashes',
                      type: { kind: 'array', length: 2, type: { kind: 'field' } },
                    },
                    { name: 'round_id', type: { kind: 'field' } },
                  ],
                },
              },
              { name: 'winner', type: { kind: 'field' } },
            ],
          },
          {
            kind: 'struct',
            path: 'common::PlayerState',
            fields: [
              { name: 'player_id', type: { kind: 'field' } },
              { name: 'encrypt_secret', type: { kind: 'field' } },
              { name: 'mask_secret', type: { kind: 'field' } },
              {
                name: 'visible_territories',
                type: { kind: 'array', length: 24, type: { kind: 'boolean' } },
              },
              {
                name: 'territories_view',
                type: {
                  kind: 'array',
                  length: 24,
                  type: {
                    kind: 'struct',
                    path: 'common::Territory',
                    fields: [
                      { name: 'id', type: { kind: 'field' } },
                      { name: 'owner_id', type: { kind: 'field' } },
                      {
                        name: 'troop_count',
                        type: { kind: 'integer', sign: 'unsigned', width: 32 },
                      },
                    ],
                  },
                },
              },
              {
                name: 'unallocated_troops',
                type: { kind: 'integer', sign: 'unsigned', width: 32 },
              },
              { name: 'reinforcements', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
              { name: 'has_conquered_territory', type: { kind: 'boolean' } },
            ],
          },
          { kind: 'boolean' },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '2920182694213909827': { error_kind: 'string', string: 'attempt to subtract with overflow' },
      '5019202896831570965': { error_kind: 'string', string: 'attempt to add with overflow' },
      '14514982005979867414': {
        error_kind: 'string',
        string: 'attempt to bit-shift with overflow',
      },
    },
  },
  bytecode:
    '',
}

export async function execute_fortify(
  game_state: GameState,
  player_state: PlayerState,
  adjacency_map: AdjacencyMap,
  move_data: FortifyMove,
  foreignCallHandler?: ForeignCallHandler
): Promise<[GameState, PlayerState, boolean]> {
  const program = new Noir(execute_fortify_circuit)
  const args: InputMap = { game_state, player_state, adjacency_map, move_data }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as [GameState, PlayerState, boolean]
}
export type check_win_conditionInputType = {
  game_state: GameState
}

export type check_win_conditionReturnType = GameState
export const check_win_condition_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
    ],
    return_type: {
      abi_type: {
        kind: 'struct',
        path: 'common::GameState',
        fields: [
          { name: 'game_ended', type: { kind: 'boolean' } },
          { name: 'turn_count', type: { kind: 'field' } },
          { name: 'current_player', type: { kind: 'field' } },
          {
            name: 'territories',
            type: {
              kind: 'array',
              length: 24,
              type: {
                kind: 'struct',
                path: 'common::Territory',
                fields: [
                  { name: 'id', type: { kind: 'field' } },
                  { name: 'owner_id', type: { kind: 'field' } },
                  { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                ],
              },
            },
          },
          {
            name: 'mpc_state',
            type: {
              kind: 'struct',
              path: 'common::MPCState',
              fields: [
                {
                  name: 'user_encrypt_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                {
                  name: 'user_mask_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                { name: 'round_id', type: { kind: 'field' } },
              ],
            },
          },
          { name: 'winner', type: { kind: 'field' } },
        ],
      },
      visibility: 'private',
    },
    error_types: {},
  },
  bytecode:
    '',
}

export async function check_win_condition(
  game_state: GameState,
  foreignCallHandler?: ForeignCallHandler
): Promise<GameState> {
  const program = new Noir(check_win_condition_circuit)
  const args: InputMap = { game_state }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as GameState
}
export type end_turnInputType = {
  game_state: GameState
}

export type end_turnReturnType = GameState
export const end_turn_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
    ],
    return_type: {
      abi_type: {
        kind: 'struct',
        path: 'common::GameState',
        fields: [
          { name: 'game_ended', type: { kind: 'boolean' } },
          { name: 'turn_count', type: { kind: 'field' } },
          { name: 'current_player', type: { kind: 'field' } },
          {
            name: 'territories',
            type: {
              kind: 'array',
              length: 24,
              type: {
                kind: 'struct',
                path: 'common::Territory',
                fields: [
                  { name: 'id', type: { kind: 'field' } },
                  { name: 'owner_id', type: { kind: 'field' } },
                  { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                ],
              },
            },
          },
          {
            name: 'mpc_state',
            type: {
              kind: 'struct',
              path: 'common::MPCState',
              fields: [
                {
                  name: 'user_encrypt_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                {
                  name: 'user_mask_secret_hashes',
                  type: { kind: 'array', length: 2, type: { kind: 'field' } },
                },
                { name: 'round_id', type: { kind: 'field' } },
              ],
            },
          },
          { name: 'winner', type: { kind: 'field' } },
        ],
      },
      visibility: 'private',
    },
    error_types: {
      '3302949731092695616': { error_kind: 'string', string: 'Game has already ended' },
    },
  },
  bytecode:
    'H4sIAAAAAAAA/9Wc+XJURRSH70wSzSIIMhFE0QEURUFmTWZEcVA0ihtx34WRibvgiruIO+77rpgQk8fwKSz/8lm8H+kubt10qCLzu1WcrurqmTOTk/667/R6zslFc2k2zgfc61yce1zZF+diStYfkA0FZEsDsuUBWSEgWxmQrQ7I1gRkxYBsfUC2ISDbGJBtCsi2BGSVgKwekDUCsq0B2baAbHtAtiMgGwvIdjpZMuVc2XJlqbtUFuoq9To9+Wh+Utc7L26DdOpSd9m/SLbFpCunolRH88F/KdlUoPN7MmzEammkVuuMVjrlanlPqdJsN+qlWr090ig3yvVGfW+lUa12GrXGaLPdHC01y7VqpzxRb1YmnK7J7nVVna7SlJCx17VnLpqf0g9lt/WeDNR7sTqT9T2aZYVRnl/gwVqs/qPCDpwW8mbVhtPRwiPcYvVP69owE+4px73Qs3OyyetV9vdfwjZMDs7oXRvnk5nxToFB0c9KlUB1M5nxZlw56xvEN+BMdHxU9jK+VExVqifDRux2xpsR1ms2o85VL7vGI+2g5FNe3M85IfPt0ak9AeUTvydlX98h5s6qr3uEzHdGNp7vXiHzXUaY+4TMdxthPk3IfI8R5tOFzPcaYe4XMt9nhHlAyHy/EeZBIfMDRpiHhMwPGmE+Q8j8kBHmJULmh40wLxUyP2KE+Uwh824jzMuEzHuMMC8XMreNMJ8lZH7UCPMKIfNeI8wFIXPHCPOwkHnCCPPZQubHjDCvFDI/boR5lZD5CSPM5wiZnzTCvFrI/JQR5nOFzE8bYT5PyPyMEeY1QuZnjTCfL2TeZ4T5AiHzfiPMRSHzc0aY1wqZnzfCvE7I/IIR5vVC5heNMF8oZH7JCPNFQuaXjTBvEDIfMMJ8sZD5FSPMlwiZXzXCvFHI/JoR5kuFzK8bYb5MyPyGEeZNQuY3jTBvFjK/ZYT5ciHz20aYtwiZDxphLgmZ3zHCXBYyHzLCXBEyv2uEuSpkfs8Ic03I/L4R5rqQ+QMjzCNC5g+NMI8KmT8ywtwQMn9shLkpZD5shPkKIfMnRpi3Cpk/NcJ8pZD5MyPMVwmZPzfCvE3I/IUR5quFzF8aYW4Jmb8ywrxdyPy1EeZrhMzfGGG+Vsj8rRHmHULm74wwXydk/t4I8/VC5h+MMI8JmX80wnyDkPknI8w3Cpl/NsK8U8j8ixHmm4TMvxphvlnI/JsR5luEzL8bYb5VyPyHEebbhMxHjDDvEjL/KWYeT3DnHDsxoYiRRMwgYugQU4YYK8QcIQYHMSmI0UDMAnz48WlfFs2FO8YHGJ9YfETxmcSHEJ86fMzwucIHCZ8cfFTw2cCHAZv+YjQXFHBdNBe+GBtZbEaxocSmEBs7bM6wwcImCRsdbFaw4cCmARjuvLkD5k6UO0LuzLhD4k6FOwbO3DmD5kyWM0rO7DjD8mc67PnZA7MnZI/EnoE1NGtK1lisOZiDmZMYoxmz+A3zTO9KtON4oiT+GbHAiI1FrChiJxFLiNg6xJoh9gqxSIjNQawKYjcQy2B3nPF1b8cZX2h8g/GVxXcUX0p8C/G1w/cMXyx8k/DVwXcFX479ccbWH9t3bMGxjcZWGNtZbEmxrcTWENs7bNGwzcJWCdsdbFkOxhlbh0Nx5i6cu2HuSrk75C6NuyXuWrh74Cyes2nOajm75CyPsy3Oejj74CyAvTF7RfZO7CVYW7PWZO3FWoS5mbmKsZux7EicedaTkVxXubJ1+O9/x/b9s9nL/e+135UDrhx0pY+T2HLvS92litc/lI3+YzGc0mkw8Xoo9Znn7w38XW6B9/lUeaLvnij675LAZ17nClcm6+s5BlLlcEKvMiad11/IRn+wr4YTrwspzmR7t0R18Pp8vM++aH7Kpz7z303/ZnL6+s0LEd4T+F8++WemkJD59vwfknKff79fAAA=',
}

export async function end_turn(
  game_state: GameState,
  foreignCallHandler?: ForeignCallHandler
): Promise<GameState> {
  const program = new Noir(end_turn_circuit)
  const args: InputMap = { game_state }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as GameState
}
export type count_player_territoriesInputType = {
  game_state: GameState
}

export type count_player_territoriesReturnType = Field[]
export const count_player_territories_circuit: CompiledCircuit = {
  abi: {
    parameters: [
      {
        name: 'game_state',
        type: {
          kind: 'struct',
          path: 'common::GameState',
          fields: [
            { name: 'game_ended', type: { kind: 'boolean' } },
            { name: 'turn_count', type: { kind: 'field' } },
            { name: 'current_player', type: { kind: 'field' } },
            {
              name: 'territories',
              type: {
                kind: 'array',
                length: 24,
                type: {
                  kind: 'struct',
                  path: 'common::Territory',
                  fields: [
                    { name: 'id', type: { kind: 'field' } },
                    { name: 'owner_id', type: { kind: 'field' } },
                    { name: 'troop_count', type: { kind: 'integer', sign: 'unsigned', width: 32 } },
                  ],
                },
              },
            },
            {
              name: 'mpc_state',
              type: {
                kind: 'struct',
                path: 'common::MPCState',
                fields: [
                  {
                    name: 'user_encrypt_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  {
                    name: 'user_mask_secret_hashes',
                    type: { kind: 'array', length: 2, type: { kind: 'field' } },
                  },
                  { name: 'round_id', type: { kind: 'field' } },
                ],
              },
            },
            { name: 'winner', type: { kind: 'field' } },
          ],
        },
        visibility: 'private',
      },
    ],
    return_type: {
      abi_type: { kind: 'array', length: 3, type: { kind: 'field' } },
      visibility: 'private',
    },
    error_types: {},
  },
  bytecode:
    '',
}

export async function count_player_territories(
  game_state: GameState,
  foreignCallHandler?: ForeignCallHandler
): Promise<Field[]> {
  const program = new Noir(count_player_territories_circuit)
  const args: InputMap = { game_state }
  const { returnValue } = await program.execute(args, foreignCallHandler)
  return returnValue as Field[]
}
